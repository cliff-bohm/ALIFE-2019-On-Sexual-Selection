% GLOBAL
  initPop = default 1000                     #(string) initial population to start MABE (if it's .plf syntax it will be parsed as if preceded by "MASTER = ". If
                                             #  it's a file name with .plf that population loader file is parsed
  mode = run                                 #(string) mode to run MABE in [run,visualize,analyze]
  outputPrefix = ./                          #(string) Directory and prefix specifying where data files will be written
  randomSeed = 101                           #(int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 30000                            #(int) how long the program will run

% ARCHIVIST
  outputMethod = Default                        #(string) output method, [SSwD, Default]

% ARCHIVIST_DEFAULT
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  popFileColumns =                           #(string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try
                                             #  to figure it out
  realtimeSequence = :1                      #(string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x to y on x,
                                             #  :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataSequence = :100                #(string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y, x-y:z = x to y
                                             #  on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotOrganismsSequence = :100           #(string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y, x-y:z = x to
                                             #  y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeMaxFile = 0                           #(bool) Save data to Max file?
  writePopFile = 1                           #(bool) Save data to average file?
  writeSnapshotDataFiles = 0                 #(bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotOrganismsFiles = 0            #(bool) if true, snapshot organisms files will be written (with all organisms for entire population)

% ARCHIVIST_SSWD
  cleanupInterval = 100                      #(int) How often to cleanup old checkpoints
  dataDelay = 25                             #(int) when using Snap Shot with Delay output Method, how long is the delay before saving data
  dataSequence = :100                        #(string) when to save a data file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates
                                             #  on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  organismsDelay = 25                        #(int) when using Snap Shot with Delay output Method, how long is the delay before saving organisms 
  organismsSequence = :100                   #(string) when to save an organisms file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0
                                             #  to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeDataFiles = 1                         #(bool) if true, data files will be written
  writeOrganismsFiles = 1                    #(bool) if true, genome files will be written

% OPTIMIZER
  optimizer = TwoSexes                       #(string) optimizer to be used, [TwoSexes]

% OPTIMIZER_TWO_SEXES
  litterSize = 1                             #(int) number of offspring produced from each mating event.
                                             #  if condition effects are being used, then the % chance to succeed will be applied to each potential offspring.
  nextPopSize = -1                           #(string) size of population after optimization(MTree). -1 will maintian the current population size.
  preferenceFormula = DM_AVE[Marker_Preference] #(string) MTree used to determine sexual preference of organism
  selectionGroupSize = 20                    #(int) size of lek if selectionSystem is Lek, number of males female will see if selectionSystem is Threshold
                                             #  i.e. the number of dads from which each mom will need to choose.
                                             #  NOTE: this should not be confused with the tournamentSizeMom and tournamentSizeDad which are used when selecting
                                             #  moms and dads (for a selection group)
  selectionSystems = Lek                     #(string) List of methods used with each sex trait (if only one system is listed, then all traits will use that method)
                                             #  options are Lek or Threshold
  sexFormula = DM_AVE[Marker_Sex]            #(string) MTree used to determine sex of organism
  sexTraits = 0,"MIN[50,DM_AVE[m1]]","MIN[50,DM_AVE[m2]]","MIN[50,DM_AVE[m3]]","MIN[50,DM_AVE[m4]]","MIN[50,DM_AVE[m5]]" #(string) list of sexual traits
                                             #  a constant value trait will result in all organisms having the same value for the trait - this value can be effected
                                             #  by optimizeValueDadMateEffect/optimizeValueMomMateEffect.
                                             #  %p%p may optionally follow a preference:
                                             #  first %p sets detection error; probability that selection will be proportional (in range of values in lek) as apposed
                                             #  to perfectly selecting for best
                                             #  second %p is probability that selection will simply fail (i.e. female selects random)
                                             #  traits are defined with MTree with access to organisms DM, and this optimizers PT
  sexTraitsThresholds =                      #(string) list of sexual traits thresholds, to be used if selectionSystem is Threshold, for a given trait.(MTree)
                                             #  If a mix of Threshold and Lex methods are being used, the Lek methods must be assigned a threshold as a place holder
                                             #  (which will be ignored, and can be 0)
  traitConditionEffects = [0]                #(string) how is each trait correlated with reproductve success? only applies to males.
                                             #  if [0], then there are no condtion effects.
                                             #  if there is more then one value in this list, then there must be one value for each sexual trait.
                                             #  each value in list will, relative to the male population scores, additivly determin the likelihood
                                             #  that a selected male will produce a viable offspring (this is experimental, biologically questionable!)

% OPTIMIZER_TWO_SEXES_GEN_DISPLAYS
  additiveNames = m1,m2,m3,m4,m5             #(string) list of names for additive markers. example: marker_A,marker_B
  additiveSourceGenomes = root::,root::,root::,root::,root:: #(string) genome (nameSpace) which should be seached for each additive marker. If organisms do not
                                             #  already have a named genome, it will be added. example: root::,root::
  additiveStartCodons = 30:31,32:33,34:35,36:37,38:39 #(string) list of start codons for additive markers.
                                             #  startcodons are lists of 1 and 8 integer values between [0 and 255] seperated by ':'. example 11:12,15:16
  assignedDuplicatesRules = Unique,Unique    #(string) list of rules for assigned markers defining behavior in case of duplicates. example: Most,Unique
                                             #  Unique - only allow one codon in genome (more then one will return -1 i.e. none found)
                                             #  Most - locate all condons and return the highest frequency (ties decided by last in genome)
                                             #  Average - locate all condons and return the average of all values found (rounded down)
                                             #  Greatest - greatest value found
                                             #  Least - least value found
  assignedNames = Marker_Sex,Marker_Preference #(string) list of names for assigned markers. example Marker_Sex,Marker_Preference
  assignedRanges = 1,5                       #(string) list of ranges (ints) for assigned markers, genetic values will be between 0 and the value
                                             #  example [1,3] would mean that the first assigned trait could be 0 or 1 and the second could be 0,1,2 or, 3
  assignedSourceGenomes = root::,root::      #(string) genome (nameSpace) which should be seached for each assigned marker. If organisms do not already have a named
                                             #  genome, it will be added. example: genome_A::,root::
  assignedStartCodons = 100:101:102:103:200:201,105:106:107:108:205:206 #(string) list of start codons for assigned markers
                                             #  startcodons are lists of 1 and 8 integer values between [0 and 255] seperated by ':'. example: 21:34,22:33
  seedCodons = 250<100:101:102:103:200:201,750<105:106:107:108:205:206,5x30:31,5x32:33,5x34:35,5x36:37,5x38:39 #(string) list of codons to seed. seedGenomes will
                                             #  determine which genome will be seeded by each. format: [copies]x[start codon list],[location]@[start codon list]
                                             #  If x is used, then the number before the start codon list will be the number of copies, placed randomly
                                             #  If < is used, then the number before the start codon list will be the location were one copy of the start codon will
                                             #  be placed.
  seedGenomes = root::,root::,root::,root::,root::,root::,root:: #(string) list of names of genomes to seed with codons
  seedRandomizeGenomes = root::              #(string) genomes in this list will be randomized on update 0 before seeding codons

% OPTIMIZER_TWO_SEXES_PARENTS_SELECTION
  elitism = 0                                #(bool) if true, dad with best dad score and mom with best mom score will survive
  optimizeValueAfterDadMates = NONE          #(string) when dad mates (i.e. is chosen ) even if no ofspring are produced, score will be temporarily updated using
                                             #  this MTree (NONE indicates no change) $score$ (current temporary score) can be used (e.g. $score$*.5 = 1/2 score
                                             #  after each mating)
  optimizeValueAfterMomMates = NONE          #(string) when mom mates (even if no offspring are produced) or mom does not accept a mate (if system is Threshold),
                                             #  score will be temporarily updated using this MTree (NONE indicates no change) $score$ (current temporary score) can
                                             #  be used (e.g. $score$*.5 = 1/2 score after each mating)
  optimizeValueDad = MIN[DM_AVE[m1],60]-(1.0*(MAX[DM_AVE[m2]-10,0]+MAX[DM_AVE[m3]-10,0]+MAX[DM_AVE[m4]-10,0]+MAX[DM_AVE[m5]-10,0])) #(string) value to choose dads
                                             #  when picking members for selection group (MTree)
  optimizeValueMom = MIN[DM_AVE[m1],60]      #(string) value used to pick moms (MTree)
  reMapFormulaDad = REMAP[$score$,$scoreDadMax$-10,$scoreDadMax$] #(string) see optimizeFormulaMom
  reMapFormulaMom = REMAP[$score$,$scoreMomMax$-10,$scoreMomMax$] #(string) function used during roulette selection to remap scores genereated by optimizeValueMom.
                                             #  Used to control strength of selection and allows for negitive scores.
                                             #  in addtion of MTree operators, the $score$, $scoreMomMin$, $scoreMomAve$, $scoreMomMax$, $scoreDadMin$, $scoreDadAve$
                                             #  and, $scoreDaddMax$ can be used
  selectionMethod = Roulette                 #(string) Tournament (will use tournament sizes) or Roulette will be used to select moms and dads for selection groups
  surviveRate = 0                            #(string) value between 0 and 1, likelyhood that an organism survive (MTree)
  tournamentSizeDad = 5                      #(int) if using Tournament Method, how many orgs are considered for each dad (i.e. selection group member)?
  tournamentSizeMom = 5                      #(int) if using Tournament Method, how many orgs are considered when selecting a mom?

% PARAMETER_FILES
  commentIndent = 45                         #(int) minimum space before comments
  maxLineLength = 160                        #(int) maximum line length

